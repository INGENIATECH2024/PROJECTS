#------------------------------------------------------- IMPORT LIBRARIES ------------------------------------------------------------------------
import pandas as pd
import matplotlib as mp 
import numpy as np
import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
from datetime import datetime
from openpyxl import load_workbook
import os


root_tk = tk.Tk()
root_tk .withdraw()

def update_time(time_label, date_label):
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    current_date = now.strftime("%Y-%m-%d")
    time_label.config(text=current_time)
    date_label.config(text=current_date)
    time_label.after(1000, update_time, time_label, date_label)
#--------------------------------------------------------------- LOGIN -------------------------------------------------------------------------------
def handle_login():
    username = username_entry.get()
    password = password_entry.get()

    # Check if the username and password are correct
    if username == "yad" and password == "1234":  # Replace with your actual credentials
        login.destroy()  # Close the login window
        mainwindow()  # Open the main window
    else:
        messagebox.showerror("Error", "Usuario o contraseña incorrectos.")

# ---------------------------------------------------------- MAIN MENU ------------------------------------------------------------------------------
def root():
    # Initialize main window
    root = tk.Toplevel()
    root.title("TRUCK SHOPS")
    root.geometry("1500x750")

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)

    # Resize the image to fit the window size
    background = background.resize((1500, 750), Image.LANCZOS)  # Adjust the size to match your window
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(root, highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    # Add the image as a background
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create frames and widgets on the canvas
    frame = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    frame.place(relx=0.1, rely=0.6, anchor="w", width=300, height=550)

    frame2 = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    frame2.place(relx=0.5, rely=0.54, anchor="center", width=300, height=450) #54

    frame3 = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    frame3.place(relx=0.9, rely=0.54, anchor="e", width=300, height=450)

    title_label = tk.Label(canvas, text="REGISTROS", bg="#C0C0C0", font=("Oswald", 15, "bold"), relief="ridge")
    title_label.place(relx=0.1, rely=0.20, anchor="w", width=300)

    title_label1 = tk.Label(canvas, text="VISUALIZACIÓN", bg="#C0C0C0", font=("Oswald", 15, "bold"), relief="ridge")
    title_label1.place(relx=0.5, rely=0.20, anchor="center", width=300)

    title_label2 = tk.Label(canvas, text="REPORTES", bg="#C0C0C0", font=("Oswald", 15, "bold"), relief="ridge")
    title_label2.place(relx=0.9, rely=0.20, anchor="e", width=300)

    title_label3 = tk.Label(canvas, text="MENU", bg="#C0C0C0", font=("Oswald", 30, "bold"), relief="raised")
    title_label3.place(relx=0.5, rely=0.10, anchor="c", width=300)

    framehome = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    framehome.place(relx=0.05, rely=0.10, anchor="w", width=70, height=70)

    framecalendar = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    framecalendar.place(relx=0.85, rely=0.9, anchor="w", width=70, height=70)

    # Load the home button image
    home_image_path = "home.jpg"  # Ensure this path is correct
    home_image = Image.open(home_image_path)
    home_image = home_image.resize((30, 20), Image.LANCZOS)  # Resize the image as needed
    home_imgtk = ImageTk.PhotoImage(home_image)

    calendar_image_path = "calendar.png"  # Ensure this path is correct
    calendar_image = Image.open(calendar_image_path)
    calendar_image = calendar_image.resize((30, 30), Image.LANCZOS)  # Resize the image as needed
    calendar_imgtk = ImageTk.PhotoImage(calendar_image)

    calendar_button = ttk.Button(framecalendar, image=calendar_imgtk, command=lambda: switchwindow(root))
    calendar_button.pack(pady=10)

    # Create a button with the home image
    home_button = ttk.Button(framehome, image=home_imgtk, command=lambda: switchwindow(root))
    home_button.pack(pady=10)

    frametime = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    frametime.place(relx=0.9, rely=0.1, anchor="e", width=100, height=50)

    framedate = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    framedate.place(relx=0.83, rely=0.1, anchor="e", width=100, height=50)

    # Create labels for time and date
    time_label = tk.Label(frametime, font=("Oswald", 20), bg="#C0C0C0", fg="black")
    time_label.pack(pady=10)

    date_label = tk.Label(framedate, font=("Oswald", 14), bg="#C0C0C0", fg="black")
    date_label.pack(pady=10)

    #----------------------------------------------------------- BUTTONS -------------------------------------------------------------------------
    style = ttk.Style()
    style.configure("TButton", font=("Oswald", 12), padding=10)

    button1 = ttk.Button(frame, text="VENTA", command=sell_submodule)
    button1.pack(pady=10)

    button2 = ttk.Button(frame, text="PRODUCTO", command=product_submodule)
    button2.pack(pady=10)

    button3 = ttk.Button(frame, text="PROVEEDOR", command=supplier_submodule)
    button3.pack(pady=10)

    button4 = ttk.Button(frame, text="ENTRADAS - SALIDAS", command= incout_submodule)
    button4.pack(pady=10)

    button5 = ttk.Button(frame, text="NOMINA",command=roster_submodule)
    button5.pack(pady=10)

    button6 = ttk.Button(frame, text="INVENTARIO", command= inventory_submodule)
    button6.pack(pady=10)

    button7 = ttk.Button(frame, text="CLIENTE", command= customer_submodule)
    button7.pack(pady=10)

    button8 = ttk.Button(frame2, text="ENVIOS", command= delivery_submodule)
    button8.pack(pady=10)

    button9 = ttk.Button(frame2, text="SALDO PROVEEDORES", command=suppliercredit_submodule)
    button9.pack(pady=10)

    button10 = ttk.Button(frame2, text="SALDO CLIENTES",command=clientecredit_submodule)
    button10.pack(pady=10)

    #button11 = ttk.Button(frame2, text="VENTAS POR COBRAR")
    #button11.pack(pady=10)

    button12 = ttk.Button(frame2, text="RESULTADOS GENERALES", command= reportegral_submodule)
    button12.pack(pady=10)

    button13 = ttk.Button(frame3, text="REPORTE DE CLIENTES", command= reportclientes_submodule)
    button13.pack(pady=10)

    button14 = ttk.Button(frame3, text="REPORTE DE GASTOS", command=reportgastos_submodule)
    button14.pack(pady=10)

    button15 = ttk.Button(frame3, text="REPORTE DE VENTAS", command=reporteventa_submodule)
    button15.pack(pady=10)

    button17 = ttk.Button(frame3, text="REPORTE DE PRODUCTOS", command= reportprod_submodule)
    button17.pack(pady=10)

    button18 = ttk.Button(frame3, text="REPORTE DE PROVEEDORES", command= reportsup_submodule)

    button18.pack(pady=10)

    button19 = ttk.Button(frame3, text="REPORTE DE INVENTARIO", command= reportinventario_submodule)
    button19.pack(pady=10)

    #button20 = ttk.Button(frame3, text="CALENDARIO DE PAGOS")
    #button20.pack(pady=10)

    #button16 = ttk.Button(frame3, text="CALENDARIO DE COBROS")
    #button16.pack(pady=10)


    # Call the update_time function to initialize the labels
    update_time(time_label, date_label)

    # Start the main loop
    root.mainloop()

def switchwindow(ovalue):
    ovalue.destroy()
    mainwindow()

def switchwindowroot(oovalue):
    oovalue.destroy()
    root()

def mainwindow():
    # Initialize main window
    mainwindow = tk.Toplevel()
    mainwindow.title("TRUCK SHOPS MAIN")
    mainwindow.geometry("1500x750")

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)

    # Resize the background image to fit the window size
    background = background.resize((1500, 750), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(mainwindow,highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    # Add the background image to the canvas
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Load the logo image
    logo_path = "logo.png"  # Ensure this path is correct
    logo = Image.open(logo_path)
    logo = logo.resize((500, 300), Image.LANCZOS)  # Resize the image as needed
    logo_imgtk = ImageTk.PhotoImage(logo)

    # Create a label with a background color to hold the logo image
    logo_label = tk.Label(canvas, image=logo_imgtk, bg="#BFC1C2", relief="ridge")
    logo_label.place(relx=0.5, rely=0.12, anchor="c", width=400, height=150)

    frametime = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    frametime.place(relx=0.9, rely=0.1, anchor="e", width=100, height=50)

    framedate = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    framedate.place(relx=0.83, rely=0.1, anchor="e", width=100, height=50)

    # Create labels for time and date
    time_label = tk.Label(frametime, font=("Oswald", 20), bg="#C0C0C0", fg="black")
    time_label.pack(pady=10)

    date_label = tk.Label(framedate, font=("Oswald", 14), bg="#C0C0C0", fg="black")
    date_label.pack(pady=10)

    framegraph = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    framegraph.place(relx=0.5, rely=0.6, anchor="c", width=1400, height=500)

    greeting_text = tk.Label(mainwindow, text="Bienvenida de vuelta, Yadira", font=("Oswald", 20, "bold"), bd=0, fg="Black", bg="#C0C0C0", highlightthickness=0)
    greeting_text.place(relx=0.02, rely=0.2, anchor="w")  # Position it in the upper left corner
    # Call the update_time function to initialize the labels
    update_time(time_label, date_label)

    framehome = tk.Frame(canvas, bg="#C0C0C0", bd=2, relief="ridge")
    framehome.place(relx=0.05, rely=0.1, anchor="center", width=120, height=50)

    # Create a button with the label "Menu" inside the frame
    home_button = ttk.Button(framehome, text="Menu", command=lambda: switchwindowroot(mainwindow))
    home_button.pack(pady=10)  # Reduce padding to fit the button in the frame

    # Start the main loop
    mainwindow.mainloop()

def sell_submodule():  
    global entries
    # Initialize main window
    sellwindow = tk.Toplevel()
    sellwindow.title("TRUCK SHOPS MAIN")
    sellwindow.geometry("1500x700")

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)

    # Resize the background image to fit the window size
    background = background.resize((1500, 700), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(sellwindow, highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    # Add the background image to the canvas
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create a frame to place the widgets (textboxes and button)
    input_frame = tk.Frame(sellwindow, bg='#C0C0C0')  # Set background color to C0C0C0
    canvas.create_window(40, 20, anchor="nw", window=input_frame)

    # Define a list of fields (labels for textboxes)
    fields = [
        'Cliente', 'RFC', 'Fecha de entrega', 'Cantidad', 'Descripcion',
        'Precio Neto', 'Total', 'Restante de producto', 'Fecha de facturacion',
        'Folio de factura', 'Complementos de pago', 'Abonos', 'Fecha',
        'Metodo de pago', 'Complemento de abono', 'Folio de complemento',
        'Confirmacion de pago en banco de Mexico'
    ]

    # Dictionary to hold references to the Entry widgets
    entries = {}

    # Create textboxes (Entry) and labels in two columns
    for idx, field in enumerate(fields):
        label = tk.Label(input_frame, text=field, bg='#C0C0C0', font="Oswald")  # Label with custom font and color
        entry = tk.Entry(input_frame, font="Oswald")  # Entry with custom font

        # Place the labels and entries in two columns using grid layout
        label.grid(row=idx // 4, column=(idx % 4) * 2, padx=10, pady=5, sticky="w")
        entry.grid(row=idx // 4, column=(idx % 4) * 2 + 1, padx=10, pady=5, sticky="w")

        entries[field] = entry

    submit_button = tk.Button(input_frame, text="Submit", font="Oswald", command=lambda: switchto("sell"))

    # Calculate the appropriate row for the button (place it after all entries)
    button_row = (len(fields) // 4) + 1

    # Place the button in the grid layout, spanning all columns
    submit_button.grid(row=button_row, column=0, columnspan=4, pady=20)

    # Start the main loop
    sellwindow.mainloop()

def product_submodule():
    global productentries
    # Initialize main window
    prodwindow = tk.Toplevel()
    prodwindow.title("TRUCK SHOPS MAIN")
    prodwindow.geometry("800x700")

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)

    # Resize the background image to fit the window size
    background = background.resize((1500, 700), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(prodwindow, highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    # Add the background image to the canvas
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create a frame to place the widgets (textboxes and button)
    input_frame = tk.Frame(prodwindow, bg='#C0C0C0')  # Set background color to C0C0C0
    canvas.create_window(40, 20, anchor="nw", window=input_frame)


    # Define a list of fields (labels for textboxes)
    fields = ['Nombre','Codigo','Proveedor','Precio','Valor MIN','Valor MAX','Area','Costo Prod','Ventas','Ingreso','Cantidad','Gasto','Ganancia','Margen','No.Registro','Verif Nombre','Verif Codigo']

    # Dictionary to hold references to the Entry widgets
    productentries = {}

    # Create textboxes (Entry) and labels in two columns
    for idx, field in enumerate(fields):
        label = tk.Label(input_frame, text=field, bg='#C0C0C0', font="Oswald")  # Label with custom font and color
        entry = tk.Entry(input_frame, font="Oswald")  # Entry with custom font

        # Place the labels and entries in two columns using grid layout
        label.grid(row=idx // 2, column=(idx % 2) * 2, padx=10, pady=5, sticky="w")
        entry.grid(row=idx // 2, column=(idx % 2) * 2 + 1, padx=10, pady=5, sticky="w")

        productentries[field] = entry

    submit_button = tk.Button(input_frame, text="Submit", font="Oswald",command=lambda: switchto("product"))

    # Calculate the appropriate row for the button (place it after all entries)
    button_row = (len(fields) // 2) + 1

    # Place the button in the grid layout, spanning all columns
    submit_button.grid(row=button_row, column=0, columnspan=4, pady=20)

    # Start the main loop
    prodwindow.mainloop()

def supplier_submodule():
    global supplierentries
    # Initialize main window
    supwindow = tk.Toplevel()
    supwindow.title("TRUCK SHOPS MAIN")
    supwindow.geometry("420x600")

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)

    # Resize the background image to fit the window size
    background = background.resize((1500, 700), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(supwindow, highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    # Add the background image to the canvas
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create a frame to place the widgets (textboxes and button)
    input_frame = tk.Frame(supwindow, bg='#C0C0C0')  # Set background color to C0C0C0
    canvas.create_window(40, 20, anchor="nw", window=input_frame)


    # Define a list of fields (labels for textboxes)
    fields = ['Empresa','Nombre','Contacto','Correo','DNI','Banco','Cta.Bancaria','Serv/Prod','No.Proveedor']

    # Dictionary to hold references to the Entry widgets
    supplierentries = {}

    # Create textboxes (Entry) and labels in two columns
    for idx, field in enumerate(fields):
        label = tk.Label(input_frame, text=field, bg='#C0C0C0', font="Oswald")  # Label with custom font and color
        entry = tk.Entry(input_frame, font="Oswald")  # Entry with custom font

        # Place the labels and entries in two columns using grid layout
        label.grid(row=idx // 1, column=(idx % 1) * 2, padx=10, pady=5, sticky="w")
        entry.grid(row=idx // 1, column=(idx % 1) * 2 + 1, padx=10, pady=5, sticky="w")

        supplierentries[field] = entry

    submit_button = tk.Button(input_frame, text="Submit", font="Oswald",command=lambda: switchto("supplier"))

    # Calculate the appropriate row for the button (place it after all entries)
    button_row = (len(fields) // 1) + 1

    # Place the button in the grid layout, spanning all columns
    submit_button.grid(row=button_row, column=0, columnspan=4, pady=20)

    # Start the main loop
    supwindow.mainloop()

def incout_submodule():
    global incoutentries
    # Initialize main window
    incoutwindow = tk.Toplevel()
    incoutwindow.title("TRUCK SHOPS MAIN")
    incoutwindow.geometry("1200x800")

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)

    # Resize the background image to fit the window size
    background = background.resize((1200, 800), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(incoutwindow, highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    # Add the background image to the canvas
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create a frame to place the widgets (textboxes and button)
    input_frame = tk.Frame(incoutwindow, bg='#C0C0C0')  # Set background color to C0C0C0
    canvas.create_window(40, 20, anchor="nw", window=input_frame)


    # Define a list of fields (labels for textboxes)
    fields = ['Status',
    'Fecha Gasto',
    'Vencimiento',
    'Tipo',
    'Concepto',
    'Subtipo',
    'Proveedor',
    'Costo Unitario',
    'Pagado',
    'Área',
    'Nombre',
    'Cantidad',
    'Unidades',
    'Forma de Pago',
    'Cuenta',
    'Folio Factura',
    'Tasa de Factura',
    'Emisión',
    'Descripción',
    'Código',
    'Estado de Pago',
    'Costo Final',
    'Egreso',
    'Monto Pendiente',
    'Pago de Egreso',
    'Facturación',
    'Impuestos',
    'Número de Gasto',
    'Inversión Total',
    'Mes de Factura',
    'Año de Factura',
    'Mes',
    'Año',
    'Registro']

    # Dictionary to hold references to the Entry widgets
    incoutentries = {}

    # Create textboxes (Entry) and labels in two columns
    for idx, field in enumerate(fields):
        label = tk.Label(input_frame, text=field, bg='#C0C0C0', font="Oswald")  # Label with custom font and color
        entry = tk.Entry(input_frame, font="Oswald")  # Entry with custom font

        # Place the labels and entries in two columns using grid layout
        label.grid(row=idx // 3, column=(idx % 3) * 2, padx=10, pady=5, sticky="w")
        entry.grid(row=idx // 3, column=(idx % 3) * 2 + 1, padx=10, pady=5, sticky="w")

        incoutentries[field] = entry

    submit_button = tk.Button(input_frame, text="Submit", font="Oswald",command=lambda: switchto("incout"))

    # Calculate the appropriate row for the button (place it after all entries)
    button_row = (len(fields) // 3) + 1

    # Place the button in the grid layout, spanning all columns
    submit_button.grid(row=button_row, column=0, columnspan=4, pady=20)

    # Start the main loop
    incoutwindow.mainloop()

def roster_submodule():
    global rosterentries
    # Initialize main window
    rosterwindowe = tk.Toplevel()
    rosterwindowe.title("TRUCK SHOPS MAIN")
    rosterwindowe.geometry("400x800")

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)

    # Resize the background image to fit the window size
    background = background.resize((1500, 800), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(rosterwindowe, highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    # Add the background image to the canvas
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create a frame to place the widgets (textboxes and button)
    input_frame = tk.Frame(rosterwindowe, bg='#C0C0C0')  # Set background color to C0C0C0
    canvas.create_window(40, 20, anchor="nw", window=input_frame)


    # Define a list of fields (labels for textboxes)
    fields = ['Nombre',
        'Fecha Ingreso',
        'Salario',
        'Horas',
        'Costo/Hora',
        'Periodo',
        'Área',
        'Nivel',
        'Tiempo',
        'Rendimiento',
        'Proporción',
        'Acumulado']

    # Dictionary to hold references to the Entry widgets
    rosterentries = {}

    # Create textboxes (Entry) and labels in two columns
    for idx, field in enumerate(fields):
        label = tk.Label(input_frame, text=field, bg='#C0C0C0', font="Oswald")  # Label with custom font and color
        entry = tk.Entry(input_frame, font="Oswald")  # Entry with custom font

        # Place the labels and entries in two columns using grid layout
        label.grid(row=idx // 1, column=(idx % 1) * 2, padx=10, pady=5, sticky="w")
        entry.grid(row=idx // 1, column=(idx % 1) * 2 + 1, padx=10, pady=5, sticky="w")

        rosterentries[field] = entry

    submit_button = tk.Button(input_frame, text="Submit", font="Oswald",command=lambda: switchto("roster"))

    # Calculate the appropriate row for the button (place it after all entries)
    button_row = (len(fields) // 1) + 1

    # Place the button in the grid layout, spanning all columns
    submit_button.grid(row=button_row, column=0, columnspan=4, pady=20)

    # Start the main loop
    rosterwindowe.mainloop()

def customer_submodule():
    global customerentries
    # Initialize main window
    customerwindow = tk.Toplevel()
    customerwindow.title("TRUCK SHOPS MAIN")
    customerwindow.geometry("430x500")

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)

    # Resize the background image to fit the window size
    background = background.resize((1500, 700), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(customerwindow, highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    # Add the background image to the canvas
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create a frame to place the widgets (textboxes and button)
    input_frame = tk.Frame(customerwindow, bg='#C0C0C0')  # Set background color to C0C0C0
    canvas.create_window(40, 20, anchor="nw", window=input_frame)


    # Define a list of fields (labels for textboxes)
    fields = ['Cliente',
        'No. Cliente',
        'Telefono',
        'Correo',
        'Empresa',
        'DNI',
        'Ubicacion',]

    # Dictionary to hold references to the Entry widgets
    customerentries = {}

    # Create textboxes (Entry) and labels in two columns
    for idx, field in enumerate(fields):
        label = tk.Label(input_frame, text=field, bg='#C0C0C0', font="Oswald")  # Label with custom font and color
        entry = tk.Entry(input_frame, font="Oswald")  # Entry with custom font

        # Place the labels and entries in two columns using grid layout
        label.grid(row=idx // 1, column=(idx % 1) * 2, padx=10, pady=5, sticky="w")
        entry.grid(row=idx // 1, column=(idx % 1) * 2 + 1, padx=10, pady=5, sticky="w")

        customerentries[field] = entry

    submit_button = tk.Button(input_frame, text="Submit", font="Oswald",command=lambda: switchto("customer"))

    # Calculate the appropriate row for the button (place it after all entries)
    button_row = (len(fields) // 1) + 1

    # Place the button in the grid layout, spanning all columns
    submit_button.grid(row=button_row, column=0, columnspan=4, pady=20)

    # Start the main loop
    customerwindow.mainloop()

def inventory_submodule():
    global inventoryentries
    # Initialize main window
    inventorywindow = tk.Toplevel()
    inventorywindow.title("TRUCK SHOPS MAIN")
    inventorywindow.geometry("430x700")

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)

    # Resize the background image to fit the window size
    background = background.resize((1500, 700), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(inventorywindow, highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    # Add the background image to the canvas
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create a frame to place the widgets (textboxes and button)
    input_frame = tk.Frame(inventorywindow, bg='#C0C0C0')  # Set background color to C0C0C0
    canvas.create_window(40, 20, anchor="nw", window=input_frame)


    # Define a list of fields (labels for textboxes)
    fields = ['Nombre',
        'Codigo',
        'Proveedor',
        'Entradas',
        'Salidas',
        'Exist Actual',
        'Almacen_percent',
        'Status',
        'Inversión',
        'Ventas',
        'Ganancia']

    # Dictionary to hold references to the Entry widgets
    inventoryentries = {}

    # Create textboxes (Entry) and labels in two columns
    for idx, field in enumerate(fields):
        label = tk.Label(input_frame, text=field, bg='#C0C0C0', font="Oswald")  # Label with custom font and color
        entry = tk.Entry(input_frame, font="Oswald")  # Entry with custom font

        # Place the labels and entries in two columns using grid layout
        label.grid(row=idx // 1, column=(idx % 1) * 2, padx=10, pady=5, sticky="w")
        entry.grid(row=idx // 1, column=(idx % 1) * 2 + 1, padx=10, pady=5, sticky="w")

        inventoryentries[field] = entry

    submit_button = tk.Button(input_frame, text="Submit", font="Oswald",command=lambda: switchto("inventory"))

    # Calculate the appropriate row for the button (place it after all entries)
    button_row = (len(fields) // 1) + 1

    # Place the button in the grid layout, spanning all columns
    submit_button.grid(row=button_row, column=0, columnspan=4, pady=20)

    # Start the main loop
    inventorywindow.mainloop() 

def delivery_submodule():

    masterxlsx = 'inv_maestro.xlsx'
    productreg = 'VENTA'

    df = pd.read_excel(masterxlsx , sheet_name=productreg)
    # Convert 'Fech Entrega' column to datetime
    df['Fech Entrega'] = pd.to_datetime(df['Fech Entrega'], errors='coerce')

    # Filter rows where the difference between 'Fech Entrega' and today is less than 30 days
    today = datetime.today()
    filtered_df = df[df['Fech Entrega'].apply(lambda x: (x - today).days <= 30)]

    # Initialize main window
    deliveryywindow = tk.Toplevel()
    deliveryywindow.title("TRUCK SHOPS MAIN")
    deliveryywindow.geometry("1000x600")  # Adjust the size accordingly

    # Load the background image
    image_path = "bg1.jpg"  # Ensure this path is correct
    background = Image.open(image_path)
    background = background.resize((1500, 700), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    # Create a canvas to display the background image
    canvas = tk.Canvas(deliveryywindow, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create a frame for the table
    table_frame = tk.Frame(canvas)
    table_frame.place(x=50, y=50, width=900, height=500)

    # Create the Treeview widget (table)
    columns = ("ID", "Cliente", "Nombre", "Cantidad", "Fecha Venta", "Tipo Entrega", "Fech Envio", "Lug Entrega", "Fech Entrega")
    tree = ttk.Treeview(table_frame, columns=columns, show="headings")
    
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=100)  # Adjust the column width as needed

    # Define tag styles for coloring rows
    tree.tag_configure('red', background='red')
    tree.tag_configure('yellow', background='yellow')
    tree.tag_configure('green', background='green')

    # Insert the data into the Treeview with color coding
    for idx, row in filtered_df.iterrows():
        days_diff = (row['Fech Entrega'] - today).days
        
        if days_diff <= 10:
            tag = 'red'
        elif 10 < days_diff <= 20:
            tag = 'yellow'
        else:
            tag = 'green'
        
        tree.insert("", "end", values=(idx+1, row["Cliente"], row["Nombre"], row["Cantidad"], 
                                       row["Fecha Venta"], row["Tipo Entrega"], row["Fech Envio"], 
                                       row["Lug Entrega"], row["Fech Entrega"]), tags=(tag,))

    # Attach the treeview to the window
    tree.pack(fill="both", expand=True)

    # Start the main loop
    deliveryywindow.mainloop()

def suppliercredit_submodule():

    masterxlsx = 'inv_maestro.xlsx'
    productreg = 'SUPPLIER'
    incout_sheet = 'INCOUT'


    df_supplier = pd.read_excel(masterxlsx, sheet_name=productreg)
    

    df_incout = pd.read_excel(masterxlsx, sheet_name=incout_sheet)
    

    supplierwindow = tk.Toplevel()
    supplierwindow.title("TRUCK SHOPS MAIN")
    supplierwindow.geometry("1000x600")  


    image_path = "bg1.jpg" 
    background = Image.open(image_path)
    background = background.resize((1500, 700), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)


    canvas = tk.Canvas(supplierwindow, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

 
    table_frame = tk.Frame(canvas)
    table_frame.place(x=50, y=50, width=900, height=500)

    columns = ("ID", "Empresa", "Adeudo Total")
    tree = ttk.Treeview(table_frame, columns=columns, show="headings")
    

    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=200) 


    for idx, row in df_supplier.iterrows():
        empresa = row['Empresa']
        

        incout_matches = df_incout[df_incout['Proveedor'] == empresa]
        

        total_adeudo = 0
        for _, incout_row in incout_matches.iterrows():
            if incout_row['Pagado'] == 'Adeudo':
                total_adeudo += incout_row['Inversion Total']


        tree.insert("", "end", values=(idx+1, empresa, total_adeudo if total_adeudo > 0 else "No Adeudo"))


    tree.pack(fill="both", expand=True)


    supplierwindow.mainloop() 

def clientecredit_submodule():
   # Load the data from the Excel file
    masterxlsx = 'inv_maestro.xlsx'
    sheet_name_venta = 'VENTA'

    df_venta = pd.read_excel(masterxlsx, sheet_name=sheet_name_venta)

    # Create a Toplevel window
    window = tk.Toplevel()
    window.title("Cliente Deudor Reporte")
    window.geometry("1000x600")

    # Load background image (optional)
    image_path = "bg1.jpg"
    background = Image.open(image_path)
    background = background.resize((1500, 700), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    canvas = tk.Canvas(window, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Table frame
    frame = tk.Frame(canvas)
    frame.place(x=50, y=50, width=900, height=500)

    # Define columns for the Treeview table, adding "Folio de la Venta"
    columns = ("Cliente", "Saldo Pendiente", "Mes", "Folio")
    tree = ttk.Treeview(frame, columns=columns, show="headings")

    # Configure headings and column widths
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=200)

    # Calculate outstanding balance and populate the table with color-coding based on delay
    current_month = datetime.now().month
    current_year = datetime.now().year

    for _, row in df_venta.iterrows():
        # Extract data for each row
        cliente = row['Cliente']
        precio_final = row['Precio Final']
        pagado = row['Pagado']
        mes = row['Mes']
        year = row.get('Año', current_year)  # Assuming there's an 'Año' column; replace if different
        folio = row['No. Venta']  # Adjust the column name if necessary

        saldo_pendiente = precio_final - pagado

        # Determine if the transaction is older than three months
        months_difference = (current_year - year) * 12 + (current_month - mes)
        if months_difference > 3:
            tag = "red"
        else:
            tag = "green"

        # Insert data into the treeview
        item_id = tree.insert("", "end", values=(cliente, saldo_pendiente, mes, folio))

        # Apply color coding
        tree.tag_configure("green", background="lightgreen")
        tree.tag_configure("red", background="lightcoral")
        tree.item(item_id, tags=(tag,))

    # Pack the treeview
    tree.pack(fill="both", expand=True)

def reportegral_submodule():
    # Load data from the Excel file
    masterxlsx = 'inv_maestro.xlsx'
    venta_sheet = 'VENTA'
    incout_sheet = 'INCOUT'
    main_sheet = 'MAIN'

    df_venta = pd.read_excel(masterxlsx, sheet_name=venta_sheet)
    df_incout = pd.read_excel(masterxlsx, sheet_name=incout_sheet)
    df_main = pd.read_excel(masterxlsx, sheet_name=main_sheet)

    # Get unique values from the 'AREAS' column in the 'MAIN' sheet for the drop-down
    areas = df_main['AREAS'].dropna().unique().tolist()  # Ensuring no NaN values are included

    # Create a Toplevel window
    window = tk.Toplevel()
    window.title("Reporte de Ventas e Inversiones")
    window.geometry("1200x800")

    # Load background image (optional)
    image_path = "bg1.jpg"
    background = Image.open(image_path)
    background = background.resize((1500, 900), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    canvas = tk.Canvas(window, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Create frame for tables and dropdown
    control_frame = tk.Frame(canvas)
    control_frame.place(x=50, y=50, width=1100, height=100)

    # Dropdown menu for filtering by area
    selected_area = tk.StringVar()
    selected_area.set("Seleccione un Área")

    def filter_data():
        area = selected_area.get()
        update_tables(area)

    area_dropdown = ttk.OptionMenu(control_frame, selected_area, *areas, command=lambda _: filter_data())
    area_dropdown.pack(pady=10)

    # Frames for tables
    ventas_frame = tk.Frame(canvas)
    ventas_frame.place(x=50, y=200, width=500, height=500)

    inversiones_frame = tk.Frame(canvas)
    inversiones_frame.place(x=600, y=200, width=500, height=500)

    # Create Treeviews
    ventas_columns = ("Mes", "Area", "Total Pagado")
    ventas_tree = ttk.Treeview(ventas_frame, columns=ventas_columns, show="headings")
    for col in ventas_columns:
        ventas_tree.heading(col, text=col)
        ventas_tree.column(col, width=150)
    ventas_tree.pack(fill="both", expand=True)

    inversiones_columns = ("Mes", "Area", "Total Pagado")
    inversiones_tree = ttk.Treeview(inversiones_frame, columns=inversiones_columns, show="headings")
    for col in inversiones_columns:
        inversiones_tree.heading(col, text=col)
        inversiones_tree.column(col, width=150)
    inversiones_tree.pack(fill="both", expand=True)

    def update_tables(area_filter=None):
        # Clear existing data
        for item in ventas_tree.get_children():
            ventas_tree.delete(item)
        for item in inversiones_tree.get_children():
            inversiones_tree.delete(item)

        # Filter data
        if area_filter:
            df_venta_filtered = df_venta[df_venta['Area'] == area_filter]
            df_incout_filtered = df_incout[df_incout['Area'] == area_filter]
        else:
            df_venta_filtered = df_venta
            df_incout_filtered = df_incout

        # Group and sum data for sales
        ventas_summary = df_venta_filtered.groupby(['Mes', 'Area'])['Pagado'].sum().reset_index()
        for _, row in ventas_summary.iterrows():
            ventas_tree.insert("", "end", values=(row['Mes'], row['Area'], row['Pagado']))

        # Group and sum data for investments
        inversiones_summary = df_incout_filtered.groupby(['Mes', 'Area'])['Pagado'].sum().reset_index()
        for _, row in inversiones_summary.iterrows():
            inversiones_tree.insert("", "end", values=(row['Mes'], row['Area'], row['Pagado']))

    # Initial table population
    update_tables()

def reportclientes_submodule():
    # Load data from the Excel file
    masterxlsx = 'inv_maestro.xlsx'
    venta_sheet = 'VENTA'

    df_venta = pd.read_excel(masterxlsx, sheet_name=venta_sheet)

    # Create a Toplevel window
    window = tk.Toplevel()
    window.title("Análisis de Clientes")
    window.geometry("1200x800")

    # Load background image (optional)
    image_path = "bg1.jpg"
    background = Image.open(image_path)
    background = background.resize((1200, 800), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    canvas = tk.Canvas(window, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Frame for client analysis summary
    summary_frame = tk.Frame(canvas)
    summary_frame.place(x=50, y=50, width=1100, height=150)

    # Client dropdown menu
    clientes = df_venta['Cliente'].unique().tolist()
    selected_cliente = tk.StringVar()
    selected_cliente.set("Seleccione un Cliente")

    def update_client_analysis(cliente_filter):
        # Clear existing data
        concepto_listbox.delete(0, tk.END)
        for item in compras_tree.get_children():
            compras_tree.delete(item)

        # Filter data for the selected client
        df_cliente = df_venta[df_venta['Cliente'] == cliente_filter]

        # Calculate saldo (balance)
        total_precio_final = df_cliente['Precio Final'].sum()
        total_pagado = df_cliente['Pagado'].sum()
        saldo_cliente = total_precio_final - total_pagado

        # Display saldo information
        saldo_label.config(text=f"Saldo Pendiente: {saldo_cliente:.2f}")

        # Populate concepto list
        conceptos = df_cliente['Concepto'].unique().tolist()
        for concepto in conceptos:
            concepto_listbox.insert(tk.END, concepto)

        # Group and sum data for purchases per month
        compras_summary = df_cliente.groupby(['Mes'])['Precio Final'].sum().reset_index()
        for _, row in compras_summary.iterrows():
            compras_tree.insert("", "end", values=(row['Mes'], row['Precio Final']))

    # Dropdown menu for selecting clients
    cliente_dropdown = ttk.OptionMenu(summary_frame, selected_cliente, *clientes, command=update_client_analysis)
    cliente_dropdown.pack(pady=10)

    # Label to display the client's balance
    saldo_label = tk.Label(summary_frame, text="Saldo Pendiente: 0.00", font=("Arial", 14))
    saldo_label.pack(pady=10)

    # Frame for concepto list
    concepto_frame = tk.Frame(canvas)
    concepto_frame.place(x=50, y=250, width=500, height=500)

    # Concepto Listbox
    concepto_listbox = tk.Listbox(concepto_frame, width=50, height=25)
    concepto_listbox.pack(side="left", fill="y")

    concepto_scrollbar = tk.Scrollbar(concepto_frame, orient="vertical", command=concepto_listbox.yview)
    concepto_scrollbar.pack(side="right", fill="y")
    concepto_listbox.config(yscrollcommand=concepto_scrollbar.set)

    # Frame for compras per month table
    compras_frame = tk.Frame(canvas)
    compras_frame.place(x=600, y=250, width=500, height=500)

    # Create Treeview for compras per month
    compras_columns = ("Mes", "Total Precio Final")
    compras_tree = ttk.Treeview(compras_frame, columns=compras_columns, show="headings")
    for col in compras_columns:
        compras_tree.heading(col, text=col)
        compras_tree.column(col, width=150)
    compras_tree.pack(fill="both", expand=True)

def reportgastos_submodule():
    masterxlsx = 'inv_maestro.xlsx'
    incout_sheet = 'INCOUT'

    df_incout = pd.read_excel(masterxlsx, sheet_name=incout_sheet)

    # Filter data for rows where "Tipo" is "Egreso"
    df_egresos = df_incout[df_incout['Tipo'] == 'Egreso']

    # Create a Toplevel window
    window = tk.Toplevel()
    window.title("Reporte de Gastos")
    window.geometry("1200x800")

    # Load background image (optional)
    image_path = "bg1.jpg"
    background = Image.open(image_path)
    background = background.resize((1200, 800), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    canvas = tk.Canvas(window, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Frame for the table
    table_frame = tk.Frame(canvas)
    table_frame.place(x=50, y=50, width=1100, height=700)

    # Define columns for the Treeview table
    columns = ("Status", "Concepto", "Proveedor", "Costo unitario", "Area", "Nombre",
               "Cantidad", "Forma de pago", "Folio de factura", "Tasa de factura",
               "Costo Final", "Año", "Mes")
    gastos_tree = ttk.Treeview(table_frame, columns=columns, show="headings")

    # Configure headings and column widths
    for col in columns:
        gastos_tree.heading(col, text=col)
        gastos_tree.column(col, width=150)

    # Insert data into the table
    for _, row in df_egresos.iterrows():
        values = (row['Status'], row['Concepto'], row['Proveedor'], row['Costo unitario'], row['Area'],
                  row['Nombre'], row['Cantidad'], row['Forma de pago'], row['Folio de factura'],
                  row['Tasa de factura'], row['Costo Final'], row['Año'], row['Mes'])
        gastos_tree.insert("", "end", values=values)

    # Pack the Treeview
    gastos_tree.pack(fill="both", expand=True)

    # Example usage (when integrating with a larger application):
    # reporte_gastos()

def reporteventa_submodule():
    # Load data from the Excel file
    masterxlsx = 'inv_maestro.xlsx'
    venta_sheet = 'VENTA'

    df_venta = pd.read_excel(masterxlsx, sheet_name=venta_sheet)

    # Create a Toplevel window
    window = tk.Toplevel()
    window.title("Reporte de Ventas")
    window.geometry("1200x800")

    # Load background image (optional)
    image_path = "bg1.jpg"
    background = Image.open(image_path)
    background = background.resize((1200, 800), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    canvas = tk.Canvas(window, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Frame for the table
    table_frame = tk.Frame(canvas)
    table_frame.place(x=50, y=50, width=1100, height=700)

    # Define columns for the Treeview table
    columns = ("Status", "Concepto", "Proveedor", "Costo unitario", "Area", "Nombre",
               "Cantidad", "Forma de pago", "Folio de factura", "Tasa de factura",
               "Costo Final", "Año", "Mes")
    ventas_tree = ttk.Treeview(table_frame, columns=columns, show="headings")

    # Configure headings and column widths
    for col in columns:
        ventas_tree.heading(col, text=col)
        ventas_tree.column(col, width=150)

    # Insert data into the table
    for _, row in df_venta.iterrows():
        values = (row['Status'], row['Concepto'], row['Proveedor'], row['Costo unitario'], row['Area'],
                  row['Nombre'], row['Cantidad'], row['Forma de pago'], row['Folio de factura'],
                  row['Tasa de factura'], row['Costo Final'], row['Año'], row['Mes'])
        ventas_tree.insert("", "end", values=values)

    # Pack the Treeview
    ventas_tree.pack(fill="both", expand=True)

def reportprod_submodule():
    # Load data from the Excel file
    masterxlsx = 'inv_maestro.xlsx'
    prodserv_sheet = 'PRODSERV'

    df_prodserv = pd.read_excel(masterxlsx, sheet_name=prodserv_sheet)

    # Create a Toplevel window
    window = tk.Toplevel()
    window.title("Reporte de Productos y Servicios")
    window.geometry("1200x800")

    # Load background image (optional)
    image_path = "bg1.jpg"
    background = Image.open(image_path)
    background = background.resize((1200, 800), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    canvas = tk.Canvas(window, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Frame for the table
    table_frame = tk.Frame(canvas)
    table_frame.place(x=50, y=50, width=1100, height=650)

    # Define columns based on DataFrame columns
    columns = list(df_prodserv.columns)
    prodserv_tree = ttk.Treeview(table_frame, columns=columns, show="headings")

    # Configure headings and column widths
    for col in columns:
        prodserv_tree.heading(col, text=col)
        prodserv_tree.column(col, width=150)

    # Insert data into the table
    for _, row in df_prodserv.iterrows():
        values = tuple(row[col] for col in columns)
        prodserv_tree.insert("", "end", values=values)

    # Pack the Treeview
    prodserv_tree.pack(fill="both", expand=True)

    # Function to export data to Excel
    def export_to_excel():
        # Get the user's desktop path
        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        output_file = os.path.join(desktop_path, "Reporte_Productos.xlsx")

        # Save the DataFrame to an Excel file
        df_prodserv.to_excel(output_file, index=False)
        tk.messagebox.showinfo("Exportación completada", f"El archivo ha sido guardado en: {output_file}")

    # Button to export data
    export_button = tk.Button(window, text="Exportar a Excel", command=export_to_excel)
    export_button.place(x=950, y=720)

def reportsup_submodule():
    # Load data from the Excel file
    masterxlsx = 'inv_maestro.xlsx'
    supplier_sheet = 'SUPPLIER'

    df_supplier = pd.read_excel(masterxlsx, sheet_name=supplier_sheet)

    # Create a Toplevel window
    window = tk.Toplevel()
    window.title("Reporte de Proveedores")
    window.geometry("1200x800")

    # Load background image (optional)
    image_path = "bg1.jpg"
    background = Image.open(image_path)
    background = background.resize((1200, 800), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    canvas = tk.Canvas(window, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Frame for the table
    table_frame = tk.Frame(canvas)
    table_frame.place(x=50, y=50, width=1100, height=650)

    # Define columns based on DataFrame columns
    columns = list(df_supplier.columns)
    supplier_tree = ttk.Treeview(table_frame, columns=columns, show="headings")

    # Configure headings and column widths
    for col in columns:
        supplier_tree.heading(col, text=col)
        supplier_tree.column(col, width=150)

    # Insert data into the table
    for _, row in df_supplier.iterrows():
        values = tuple(row[col] for col in columns)
        supplier_tree.insert("", "end", values=values)

    # Pack the Treeview
    supplier_tree.pack(fill="both", expand=True)

    # Function to export data to Excel
    def export_to_excel():
        # Get the user's desktop path
        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        output_file = os.path.join(desktop_path, "Reporte_Proveedores.xlsx")

        # Save the DataFrame to an Excel file
        df_supplier.to_excel(output_file, index=False)
        messagebox.showinfo("Exportación completada", f"El archivo ha sido guardado en: {output_file}")

    # Button to export data
    export_button = tk.Button(window, text="Exportar a Excel", command=export_to_excel)
    export_button.place(x=950, y=720)

def reportinventario_submodule():
    # Load data from the Excel file
    masterxlsx = 'inv_maestro.xlsx'
    inventario_sheet = 'INVENTARIO'

    df_inventario = pd.read_excel(masterxlsx, sheet_name=inventario_sheet)

    # Group data by "Codigo" and "Proveedor" and count the elements
    grouped_df = df_inventario.groupby(['Codigo', 'Proveedor']).size().reset_index(name='Cantidad')

    # Create a Toplevel window
    window = tk.Toplevel()
    window.title("Reporte de Inventario")
    window.geometry("1200x800")

    # Load background image (optional)
    image_path = "bg1.jpg"
    background = Image.open(image_path)
    background = background.resize((1200, 800), Image.LANCZOS)
    bgimg = ImageTk.PhotoImage(background)

    canvas = tk.Canvas(window, highlightthickness=0)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bgimg, anchor="nw")

    # Frame for the table
    table_frame = tk.Frame(canvas)
    table_frame.place(x=50, y=50, width=1100, height=650)

    # Define columns for the Treeview table
    columns = ["Codigo", "Proveedor", "Cantidad"]
    inventario_tree = ttk.Treeview(table_frame, columns=columns, show="headings")

    # Configure headings and column widths
    for col in columns:
        inventario_tree.heading(col, text=col)
        inventario_tree.column(col, width=200)

    # Insert data into the table
    for _, row in grouped_df.iterrows():
        values = (row['Codigo'], row['Proveedor'], row['Cantidad'])
        inventario_tree.insert("", "end", values=values)

    # Pack the Treeview
    inventario_tree.pack(fill="both", expand=True)

    # Function to export data to Excel
    def export_to_excel():
        # Get the user's desktop path
        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        output_file = os.path.join(desktop_path, "Reporte_Inventario.xlsx")

        # Save the grouped DataFrame to an Excel file
        grouped_df.to_excel(output_file, index=False)
        messagebox.showinfo("Exportación completada", f"El archivo ha sido guardado en: {output_file}")

    # Button to export data
    export_button = tk.Button(window, text="Exportar a Excel", command=export_to_excel)
    export_button.place(x=950, y=720)

def sell_register():
    # DEFINE XLSX PROPERTIES
    masterxlsx = 'inv_maestro.xlsx'
    productreg = 'VENTA'

    # Load existing data
    try:
        existing_df = pd.read_excel(masterxlsx, sheet_name=productreg)
    except FileNotFoundError:
        # If the file doesn't exist, create an empty DataFrame
        existing_df = pd.DataFrame()

    # Obtener valores de las entradas
    new_product = {
        'Cliente': entries['Cliente'].get(),
        'RFC': entries['RFC'].get(),
        'Fecha de entrega': entries['Fecha de entrega'].get(),
        'Cantidad': entries['Cantidad'].get(),
        'Descripcion': entries['Descripcion'].get(),
        'Precio Neto': entries['Precio Neto'].get(),
        'Total': entries['Total'].get(),
        'Restante de producto': entries['Restante de producto'].get(),
        'Fecha de facturacion': entries['Fecha de facturacion'].get(),
        'Folio de factura': entries['Folio de factura'].get(),
        'Complementos de pago': entries['Complementos de pago'].get(),
        'Abonos': entries['Abonos'].get(),
        'Fecha': entries['Fecha'].get(),
        'Metodo de pago': entries['Metodo de pago'].get(),
        'Complemento de abono': entries['Complemento de abono'].get(),
        'Folio de complemento': entries['Folio de complemento'].get(),
        'Confirmacion de pago en banco de Mexico': entries['Confirmacion de pago en banco de Mexico'].get()
    }

    # Convertir el diccionario a un DataFrame
    new_product_df = pd.DataFrame([new_product])

    # Concatenar con los datos existentes
    df = pd.concat([existing_df, new_product_df], ignore_index=True)

    # Guardar los cambios en el archivo Excel
    with pd.ExcelWriter(masterxlsx, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name=productreg, index=False)

    print("Venta registrada correctamente.")

def prod_register():
    # DEFINE XLSX PROPERTIES
    masterxlsx = 'inv_maestro.xlsx'
    productreg = 'PRODSERV'

     # Cargar el libro existente y la hoja especificada en un DataFrame
    try:
        # Load existing data
        existing_df = pd.read_excel(masterxlsx, sheet_name=productreg)
    except FileNotFoundError:
        # If the file doesn't exist, create an empty DataFrame
        existing_df = pd.DataFrame()

    # Leave the options
    name = productentries['Nombre'].get()
    code = productentries['Codigo'].get()
    seller = productentries['Proveedor'].get()
    price = productentries['Precio'].get()
    min_value = productentries['Valor MIN'].get()
    max_value = productentries['Valor MAX'].get()
    area = productentries['Area'].get()
    prod_cost = productentries['Costo Prod'].get()
    sellings = productentries['Ventas'].get()
    income = productentries['Ingreso'].get()
    qty = productentries['Cantidad'].get()
    outcomes = productentries['Gasto'].get()
    earnings = productentries['Ganancia'].get()
    margin = productentries['Margen'].get()
    reg_no = productentries['No.Registro'].get()
    name_verif = productentries['Verif Nombre'].get()
    code_verif = productentries['Verif Codigo'].get()
    # -------------------------------------------------------- DEFINE VALUES ------------------------------------------------------------------------

    new_product = {
        'Nombre' : name,
        'Codigo' : code,
        'Proveedor': seller,
        'Precio': price,
        'Valor MIN': min_value,
        'Valor MAX': max_value,
        'Area' : area,
        'Costo Prod': prod_cost,
        'Ventas' : sellings,
        'Ingreso' : income,
        'Cantidad' : qty,
        'Gasto' : outcomes,
        'Ganancia' : earnings,
        'Margen' : margin,
        'No.Registro': reg_no,
        'Verif Nombre':name_verif,
        'Verif Codigo':code_verif

    }

    new_product_df = pd.DataFrame([new_product])

    df = pd.concat([existing_df, new_product_df], ignore_index=True)

    with pd.ExcelWriter(masterxlsx, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name=productreg, index=False)

    print("Producto registrado correctamente.")

def sup_register():
     # DEFINE XLSX PROPERTIES
    masterxlsx = 'inv_maestro.xlsx'
    productreg = 'SUPPLIER'

    try:
        # Load existing data
        existing_df = pd.read_excel(masterxlsx, sheet_name=productreg)
    except FileNotFoundError:
        # If the file doesn't exist, create an empty DataFrame
        existing_df = pd.DataFrame()

    # -------------------------------------------------------- DEFINE VALUES ------------------------------------------------------------------------

    new_product = {
        'Empresa' : supplierentries['Empresa'].get(),
        'Nombre' : supplierentries['Nombre'].get(),
        'Contacto': supplierentries['Contacto'].get(),
        'Correo': supplierentries['Correo'].get(),
        'DNI': supplierentries['DNI'].get(),
        'Banco': supplierentries['Banco'].get(),
        'Cta.Bancaria' : supplierentries['Cta.Bancaria'].get(),
        'Serv/Prod': supplierentries['Serv/Prod'].get(),
        'No.Proveedor' : supplierentries['No.Proveedor'].get()
    
    }

    new_product_df = pd.DataFrame([new_product])

    df = pd.concat([existing_df, new_product_df], ignore_index=True)

    with pd.ExcelWriter(masterxlsx, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name=productreg, index=False)

    print("Supplier registrado correctamente.")

def incout_register():
      # DEFINE XLSX PROPERTIES
    masterxlsx = 'inv_maestro.xlsx'
    productreg = 'INCOUT'

    try:
        # Load existing data
        existing_df = pd.read_excel(masterxlsx, sheet_name=productreg)
    except FileNotFoundError:
        # If the file doesn't exist, create an empty DataFrame
        existing_df = pd.DataFrame()

    # -------------------------------------------------------- DEFINE VALUES ------------------------------------------------------------------------

    new_product = {
    'Status': incoutentries['Status'].get(),
    'Fecha Gasto': incoutentries['Fecha Gasto'].get(),
    'Vencimiento': incoutentries['Vencimiento'].get(),
    'Tipo': incoutentries['Tipo'].get(),
    'Concepto': incoutentries['Concepto'].get(),
    'Subtipo': incoutentries['Subtipo'].get(),
    'Proveedor': incoutentries['Proveedor'].get(),
    'Costo Unitario': incoutentries['Costo Unitario'].get(),
    'Pagado': incoutentries['Pagado'].get(),
    'Área': incoutentries['Área'].get(),
    'Nombre': incoutentries['Nombre'].get(),
    'Cantidad': incoutentries['Cantidad'].get(),
    'Unidades': incoutentries['Unidades'].get(),
    'Forma de Pago': incoutentries['Forma de Pago'].get(),
    'Cuenta': incoutentries['Cuenta'].get(),
    'Folio Factura': incoutentries['Folio Factura'].get(),
    'Tasa de Factura': incoutentries['Tasa de Factura'].get(),
    'Emisión': incoutentries['Emisión'].get(),
    'Descripción': incoutentries['Descripción'].get(),
    'Código': incoutentries['Código'].get(),
    'Estado de Pago': incoutentries['Estado de Pago'].get(),
    'Costo Final': incoutentries['Costo Final'].get(),
    'Egreso': incoutentries['Egreso'].get(),
    'Monto Pendiente': incoutentries['Monto Pendiente'].get(),
    'Pago de Egreso': incoutentries['Pago de Egreso'].get(),
    'Facturación': incoutentries['Facturación'].get(),
    'Impuestos': incoutentries['Impuestos'].get(),
    'Número de Gasto': incoutentries['Número de Gasto'].get(),
    'Inversión Total': incoutentries['Inversión Total'].get(),
    'Mes de Factura': incoutentries['Mes de Factura'].get(),
    'Año de Factura': incoutentries['Año de Factura'].get(),
    'Mes': incoutentries['Mes'].get(),
    'Año': incoutentries['Año'].get(),
    'Registro': incoutentries['Registro'].get()}

    new_product_df = pd.DataFrame([new_product])

    df = pd.concat([existing_df, new_product_df], ignore_index=True)

    with pd.ExcelWriter(masterxlsx, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name=productreg, index=False)

    print("Income / Outcome registrado correctamente.")

def roster_register():
    # DEFINE XLSX PROPERTIES
    masterxlsx = 'inv_maestro.xlsx'
    productreg = 'ROSTER'

    try:
        # Load existing data
        existing_df = pd.read_excel(masterxlsx, sheet_name=productreg)
    except FileNotFoundError:
        # If the file doesn't exist, create an empty DataFrame
        existing_df = pd.DataFrame()

    # -------------------------------------------------------- DEFINE VALUES ------------------------------------------------------------------------

    new_employee = {
        'Nombre': rosterentries['Nombre'].get(),
        'Fecha Ingreso': rosterentries['Fecha Ingreso'].get(),
        'Salario': rosterentries['Salario'].get(),
        'Horas': rosterentries['Horas'].get(),
        'Costo/Hora': rosterentries['Costo/Hora'].get(),
        'Periodo': rosterentries['Periodo'].get(),
        'Área': rosterentries['Área'].get(),
        'Nivel': rosterentries['Nivel'].get(),
        'Tiempo': rosterentries['Tiempo'].get(),
        'Rendimiento': rosterentries['Rendimiento'].get(),
        'Proporción': rosterentries['Proporción'].get(),
        'Acumulado': rosterentries['Acumulado'].get()
    }

    new_product_df = pd.DataFrame([new_employee])

    df = pd.concat([existing_df, new_product_df], ignore_index=True)

    with pd.ExcelWriter(masterxlsx, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name=productreg, index=False)

    print("Roster registrado correctamente.")

def costumer_registration():
    # Define XLSX properties
    masterxlsx = 'inv_maestro.xlsx'
    productreg = 'CLIENTE'

    # Read the existing Excel file including all sheets
    try:
        # Load existing data
        existing_df = pd.read_excel(masterxlsx, sheet_name=productreg)
    except FileNotFoundError:
        # If the file doesn't exist, create an empty DataFrame
        existing_df = pd.DataFrame()

    # -------------------------------------------------------- DEFINE VALUES ------------------------------------------------------------------------
    new_customer = {
        'Cliente': customerentries['Cliente'].get(),
        'No. Cliente': customerentries['No. Cliente'].get(),
        'Telefono': customerentries['Telefono'].get(),
        'Correo': customerentries['Correo'].get(),
        'Empresa': customerentries['Empresa'].get(),
        'Ubicacion': customerentries['Ubicacion'].get(),
        'RFC': customerentries['RFC'].get(),

    }

    # Convert the new entry into a DataFrame
    new_product_df = pd.DataFrame([new_customer])

    # Concatenate the new customer entry to the existing dataframe
    df = pd.concat([existing_df, new_product_df], ignore_index=True)

    with pd.ExcelWriter(masterxlsx, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name=productreg, index=False)

    print("Customer registered successfully.")

def inventory_registration():
     # DEFINE XLSX PROPERTIES
    masterxlsx = 'inv_maestro.xlsx'
    productreg = 'INVENTARIO'

    try:
        # Load existing data
        existing_df = pd.read_excel(masterxlsx, sheet_name=productreg)
    except FileNotFoundError:
        # If the file doesn't exist, create an empty DataFrame
        existing_df = pd.DataFrame()

    # -------------------------------------------------------- DEFINE VALUES ------------------------------------------------------------------------
    new_employee = {
        'Tipo': inventoryentries['Tipo'].get(),
        'Cantidad': inventoryentries['Cantidad'].get(),
        'Concepto': inventoryentries['Concepto'].get(),
        'Proveedor': inventoryentries['Proveedor'].get(),
        'Precio Neto': inventoryentries['Precio Neto'].get(),
        'Precio IVA': inventoryentries['Precio IVA'].get(),
        'Precio con descuento': inventoryentries['Precio con descuento'].get(),
        'Precio venta': inventoryentries['Precio venta'].get()
    }

    # Check if the entry already exists based on unique criteria (you can adjust criteria as needed)
    matching_rows = existing_df[
        (existing_df['Concepto'] == new_employee['Concepto']) & 
        (existing_df['Proveedor'] == new_employee['Proveedor'])
    ]

    if not matching_rows.empty:
        # If a matching row is found, prompt the user with a warning
        user_response = messagebox.askyesno("Advertencia", "El elemento ya existe. ¿Desea modificarlo?")
        if user_response:
            # Update existing row(s)
            for idx in matching_rows.index:
                existing_df.at[idx, 'Tipo'] = new_employee['Tipo']
                existing_df.at[idx, 'Cantidad'] = new_employee['Cantidad']
                existing_df.at[idx, 'Precio Neto'] = new_employee['Precio Neto']
                existing_df.at[idx, 'Precio IVA'] = new_employee['Precio IVA']
                existing_df.at[idx, 'Precio con descuento'] = new_employee['Precio con descuento']
                existing_df.at[idx, 'Precio venta'] = new_employee['Precio venta']
        else:
            # If user does not want to modify, return without adding a new row
            return
    else:
        # If no matching rows, add the new product
        new_product_df = pd.DataFrame([new_employee])
        existing_df = pd.concat([existing_df, new_product_df], ignore_index=True)

    # Save the updated DataFrame to the Excel file
    with pd.ExcelWriter(masterxlsx, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        existing_df.to_excel(writer, sheet_name=productreg, index=False)

def switchto(window):
    if window == "sell":
        sell_register()
    elif window == "product":
        prod_register()
    elif window == "supplier":
        sup_register()
    elif window == "incout":
        incout_register()
    elif window== "roster":
        roster_register()
    elif window == "customer":
        costumer_registration()
    elif window == "inventory":
        inventory_registration()
    


# Create the login window
login = tk.Toplevel()
login.title("Login Window")
login.geometry("400x300")

# Load the home button image
home_image_path = "logo.png"  # Ensure this path is correct
home_image = Image.open(home_image_path)
home_image = home_image.resize((80, 70), Image.LANCZOS)  # Resize the image as needed
home_imgtk = ImageTk.PhotoImage(home_image)

# Create a label to hold the image and place it at the top center
image_label = tk.Label(login, image=home_imgtk)
image_label.pack(pady=20)  # Padding to position the image lower from the top

# Center the image horizontally
image_label.place(relx=0.5, y=20, anchor="n")

# Create a frame for the login form
frame = tk.Frame(login, padx=20, pady=20)
frame.pack(expand=True)

# Username label and entry
username_label = tk.Label(frame, text="Usuario:")
username_label.grid(row=4, column=0, pady=10)
username_entry = tk.Entry(frame)
username_entry.grid(row=4, column=1, pady=10)

# Password label and entry
password_label = tk.Label(frame, text="Contraseña:")
password_label.grid(row=5, column=0, pady=10)
password_entry = tk.Entry(frame, show="*")
password_entry.grid(row=5, column=1, pady=10)

# Submit button
submit_button = tk.Button(frame, text="Submit", command=handle_login)
submit_button.grid(row=6, columnspan=2, pady=20)

# Start the login window's main loop
login.mainloop()
